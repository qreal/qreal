	class @@ElementName@@ : public qReal::ElementImpl
	{
	public:
@@NodeConstructor@@
		void init(qReal::LabelFactoryInterface &, QList<qReal::LabelInterface*> &) {}

		void init(QRectF &contents
				, PortFactoryInterface const &portFactory
				, QList<PortInterface *> &ports
				, qReal::LabelFactoryInterface &factory
				, QList<qReal::LabelInterface*> &titles
				, qReal::SdfRendererInterface *renderer,
				qReal::ElementRepoInterface *elementRepo
			)

		{
@@NodeUnusedArgs@@
			mRenderer = renderer;
			mRenderer->setElementRepo(elementRepo);
@@NodeLoadShapeRenderer@@
@@NodeSetContents@@
@@NodeInitPorts@@
@@NodeInit@@
		}
		
		qReal::ElementImpl *clone() { return NULL; }

		~@@ElementName@@() {}

		void paint(QPainter *painter, QRectF &contents)
		{
			mRenderer->render(painter, contents);
		}

		Qt::PenStyle getPenStyle() const { return Qt::SolidLine; }

		void drawStartArrow(QPainter *) const {}
		void drawEndArrow(QPainter *) const {}

		void updateData(qReal::ElementRepoInterface *repo) const
		{
@@UpdateData@@
		}

		bool isNode() const
		{
			return @@IsNode@@;
		}

		bool isContainer() const
		{
			return @@IsContainer@@;
		}

		bool isSortingContainer() const
		{
			return @@IsSortContainer@@;
		}

		QVector<int> sizeOfForestalling() const
		{
			QVector<int> result;
			result@@SizeOfForestalling@@;
;
			return result;
		}       

		int sizeOfChildrenForestalling() const
		{
			return @@SizeOfChildrenForestalling@@;
		}

		bool minimizesToChildren() const
		{
			return @@MinimizesToChildren@@;
		}

		bool hasMovableChildren() const
		{
			return @@HasMovableChildren@@;
		}

		bool maximizesChildren() const
		{
			return @@MaximizesChildren@@;
		}

		QStringList fromPortTypes() const
		{
			return QStringList("NonTyped");
		}

		enums::linkShape::LinkShape shapeType() const
		{
			return enums::linkShape::square;
		}

		QStringList toPortTypes() const
		{
			return QStringList("NonTyped");
		}

		bool createChildrenFromMenu() const
		{
			return true;
		}


		bool isPort() const
		{
			return @@IsPort@@;
		}

		bool hasPin() const
		{
			return @@HasPin@@;
		}

		QList<double> border() const
		{
			QList<double> list;
@@NodeBorder@@
			return list;
		}

		QStringList bonusContextMenuFields() const
		{
			return @@ItemsList@@;
		}

		bool isResizeable() const
		{
			return @@IsResizeable@@;
		}

		int getPenWidth() const
		{ 
			return 0; 
		}

		QColor getPenColor() const 
		{ 
			return QColor(); 
		}

		bool isDividable() const
		{
			return false;
		}

	private:
		qReal::SdfRendererInterface *mRenderer;
		QStringList mBonusContextMenuFields;
@@LabelDefinition@@
	};

