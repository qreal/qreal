#include "pluginInterface.h"
#include "../../../qrgui/plugins/editorPluginInterface/elementImpl.h"
#include "elements.h"


@@MetamodelName@@Plugin::@@MetamodelName@@Plugin()
{
	initPlugin();
}

void @@MetamodelName@@Plugin::initPlugin()
{
	initNameMap();
	initMouseGestureMap();
	initHotKeyMap();
	initPropertyMap();
	initPropertyDefaultsMap();
	initDescriptionMap();
}

void @@MetamodelName@@Plugin::initNameMap()
{
@@InitDiagramNameMapLine@@
@@InitDiagramNodeNameMapLine@@
@@InitElementNameMapLine@@
@@InitPropertyNamesMapLine@@
}

void @@MetamodelName@@Plugin::initMouseGestureMap()
{
@@InitMouseGesturesMapLine@@
}

void @@MetamodelName@@Plugin::initHotKeyMap()
{
@@InitHotKeysMapLine@@
}

void @@MetamodelName@@Plugin::initPropertyMap()
{
@@InitPropertyTypesMapLine@@
}

void @@MetamodelName@@Plugin::initPropertyDefaultsMap()
{
@@InitPropertyDefaultMapLine@@
}

void @@MetamodelName@@Plugin::initParentsMap()
{
@@InitParentsMapLine@@
}

QStringList @@MetamodelName@@Plugin::diagrams() const
{
	return diagramNameMap.keys();
}

QStringList @@MetamodelName@@Plugin::elements(const QString &diagram) const
{
	return elementsNameMap[diagram].keys();
}

QString @@MetamodelName@@Plugin::elementDescription(const QString &diagram, const QString &element) const
{
	return elementsDescriptionMap[diagram][element];
}

QString @@MetamodelName@@Plugin::propertyDescription(const QString &diagram, const QString &element, const QString &property) const
{
	return propertiesDescriptionMap[diagram][element][property];
}

QString @@MetamodelName@@Plugin::propertyDisplayedName(const QString &diagram, const QString &element, const QString &property) const
{
	return propertiesDisplayedNamesMap[diagram][element][property];
}

void @@MetamodelName@@Plugin::initDescriptionMap()
{
@@ElementDescriptionMapLine@@
}

bool @@MetamodelName@@Plugin::isParentOf(const QString &parentDiagram, const QString &parentElement, const QString &childDiagram, const QString &childElement) const
{
	if (childDiagram == parentDiagram && childElement == parentElement)
		return true;
	if (parentsMap[childDiagram][childElement].contains(qMakePair(parentDiagram, parentElement)))
		return true;
	typedef QPair<QString, QString> StringPair;
	foreach (StringPair const &pair, parentsMap[childDiagram][childElement])
		if (isParentOf(parentDiagram, parentElement, pair.first, pair.second))
			return true;
	return false;
}

QList<QPair<QString, QString> > @@MetamodelName@@Plugin::getParentsOf(const QString &diagram, const QString &element) const
{
	return parentsMap[diagram][element];
}

QStringList @@MetamodelName@@Plugin::diagramPaletteGroups(const QString &diagram) const
{
	return paletteGroupsMap[diagram].keys();
}

QStringList @@MetamodelName@@Plugin::diagramPaletteGroupList(const QString &diagram, const QString &group) const
{
	return paletteGroupsMap[diagram][group];
}

QStringList @@MetamodelName@@Plugin::getPropertiesWithDefaultValues(const QString &element) const
{
	return propertyDefault[element].keys();
}

QString @@MetamodelName@@Plugin::diagramPaletteGroupDescription(const QString &diagram, const QString &group) const
{
	return paletteGroupsDescriptionMap[diagram][group];
}

QString @@MetamodelName@@Plugin::editorName() const
{
	 return "@@MetamodelName@@ Editor";
}

QString @@MetamodelName@@Plugin::diagramName(const QString &diagram) const
{
	return diagramNameMap[diagram];
}

QString @@MetamodelName@@Plugin::diagramNodeName(const QString &diagram) const
{
	return diagramNodeNameMap[diagram];
}

QString @@MetamodelName@@Plugin::elementName(const QString &diagram, const QString &element) const
{
	return elementsNameMap[diagram][element];
}

QString @@MetamodelName@@Plugin::elementMouseGesture(const QString &diagram, const QString &element) const
{
	return elementMouseGesturesMap[diagram][element];
}

QString @@MetamodelName@@Plugin::elementHotKey(const QString &diagram, const QString &element) const
{
	return elementHotKeysMap[diagram][element];
}

qReal::ElementImpl* @@MetamodelName@@Plugin::getGraphicalObject(const QString &/*diagram*/, const QString &element) const
{
@@GetGraphicalObjectLine@@

	Q_ASSERT(!"Request for creation of an element with unknown name");
	return NULL;
}

QStringList @@MetamodelName@@Plugin::getPropertyNames(const QString &/*diagram*/, const QString &element) const
{
	QStringList result;
@@GetPropertyNamesLine@@
	return result;
}

QStringList @@MetamodelName@@Plugin::getReferenceProperties(const QString &/*diagram*/, const QString &element) const
{
	QStringList result;
@@GetReferencePropertiesLine@@
	return result;
}

QStringList @@MetamodelName@@Plugin::getTypesContainedBy(const QString &element) const
{
	QStringList result;
@@GetContainedByLine@@
	return result;
}

QStringList @@MetamodelName@@Plugin::getConnectedTypes(const QString &element) const
{
	QStringList result;
@@GetConnectedTypesLine@@
	return result;
}

QStringList @@MetamodelName@@Plugin::getUsedTypes(const QString &element) const
{
	QStringList result;
@@GetUsedTypesLine@@
	return result;
}

QList<QPair<QPair<QString,QString>,QPair<bool,QString> > > @@MetamodelName@@Plugin::getPossibleEdges(const QString &element) const
{
	QList<QPair<QPair<QString,QString>,QPair<bool,QString> > > result;
@@GetPossibleEdgesLine@@
	return result;
}

//(-1) means "edge", (+1) means "node"
int @@MetamodelName@@Plugin::isNodeOrEdge(const QString &element) const
{
@@IsNodeOrEdgeLine@@
	return 0;
}

QString @@MetamodelName@@Plugin::getPropertyType(const QString &element, const QString &property) const
{
	return propertyTypes[element][property];
}

QString @@MetamodelName@@Plugin::getPropertyDefaultValue(const QString &element, const QString &property) const
{
	return propertyDefault[element][property];
}

QList<qReal::ListenerInterface*> @@MetamodelName@@Plugin::listeners() const
{
	QList<qReal::ListenerInterface*> result;
	return result;
}

QList<qReal::EditorInterface::ExplosionData>@@MetamodelName@@Plugin::explosions(const QString &diagram, const QString &element) const
{
	return mExplosionsMap[diagram][element];
}

QStringList @@MetamodelName@@Plugin::getPortTypes(const QString &/*diagram*/, const QString &element) const
{
	QStringList result;
@@GetPortTypesLine@@
	return result;
}

QList<QPair<QString, QString>> @@MetamodelName@@Plugin::getEnumValues(const QString &name) const
{
@@GetEnumValuesLine@@
	return {};
}

bool @@MetamodelName@@Plugin::isEnumEditable(const QString &name) const
{
	const QStringList editableEnums = {  };
	return editableEnums.contains(name);
}

QString @@MetamodelName@@Plugin::getGroupsXML() const
{
	return QString::fromUtf8("");
}

bool @@MetamodelName@@Plugin::shallPaletteBeSorted(const QString &diagram) const
{
	return mShallPaletteBeSortedMap[diagram];
}
