#include "pluginInterface.h"

#include "elements.h"


@@MetamodelName@@Plugin::@@MetamodelName@@Plugin()
{
	initPlugin();
}

void @@MetamodelName@@Plugin::initPlugin()
{
	initNameMap();
	initMouseGestureMap();
	initPropertyMap();
	initPropertyDefaultsMap();
	initParentsMap();
	initDescriptionMap();
	initShallPaletteBeSortedMap();
}

void @@MetamodelName@@Plugin::initNameMap()
{
@@InitDiagramNameMapLine@@
@@InitDiagramNodeNameMapLine@@
@@InitElementNameMapLine@@
@@InitPropertyNamesMapLine@@
}

void @@MetamodelName@@Plugin::initMouseGestureMap()
{
@@InitMouseGesturesMapLine@@
}

void @@MetamodelName@@Plugin::initPropertyMap()
{
@@InitPropertyTypesMapLine@@
}

void @@MetamodelName@@Plugin::initPropertyDefaultsMap()
{
@@InitPropertyDefaultMapLine@@
}

void @@MetamodelName@@Plugin::initParentsMap()
{
@@InitParentsMapLine@@
}

void TestMetamodelPlugin::initShallPaletteBeSortedMap()
{
	//TODO: realize
}


void @@MetamodelName@@Plugin::initDescriptionMap()
{
@@InitDescriptionMapLine@@
}

void @@MetamodelName@@Plugin::initExplosionsMap()
{
}

QStringList @@MetamodelName@@Plugin::diagrams() const
{
	return diagramNameMap.keys();
}

QStringList @@MetamodelName@@Plugin::elements(QString const &diagram) const
{
	return elementsNameMap[diagram].keys();
}

QString @@MetamodelName@@Plugin::elementDescription(QString const &diagram, QString const &element) const
{
	return elementsDescriptionMap[diagram][element];
}

QString @@MetamodelName@@Plugin::propertyDescription(QString const &diagram, QString const &element, QString const &property) const
{
	return propertiesDescriptionMap[diagram][element][property];
}

QString @@MetamodelName@@Plugin::propertyDisplayedName(QString const &diagram, QString const &element, QString const &property) const
{
	return propertiesDisplayedNamesMap[diagram][element][property];
}

bool @@MetamodelName@@Plugin::isParentOf(QString const &parentDiagram, QString const &parentElement, QString const &childDiagram, QString const &childElement) const
{
	if (childDiagram == parentDiagram && childElement == parentElement)
		return true;
	if (parentsMap[childDiagram][childElement].contains(qMakePair(parentDiagram, parentElement)))
		return true;
	typedef QPair<QString, QString> StringPair;
	foreach (StringPair const &pair, parentsMap[childDiagram][childElement])
		if (isParentOf(parentDiagram, parentElement, pair.first, pair.second))
			return true;
	return false;
}

QList<QPair<QString, QString> > @@MetamodelName@@Plugin::getParentsOf(QString const &diagram, QString const &element) const
{
	return parentsMap[diagram][element];
}

QStringList @@MetamodelName@@Plugin::diagramPaletteGroups(QString const &diagram) const
{
	return paletteGroupsMap[diagram].keys();
}

QStringList @@MetamodelName@@Plugin::diagramPaletteGroupList(QString const &diagram, QString const &group) const
{
	return paletteGroupsMap[diagram][group];
} 

QStringList @@MetamodelName@@Plugin::getPropertiesWithDefaultValues(QString const &element) const
{
	return propertyDefault[element].keys();
}

QString @@MetamodelName@@Plugin::diagramPaletteGroupDescription(QString const &diagram, QString const &group) const
{
	return paletteGroupsDescriptionMap[diagram][group];
}

bool TestMetamodelPlugin::shallPaletteBeSorted(QString const &diagram) const
{
	return mShallPaletteBeSortedMap[diagram];
}

QIcon @@MetamodelName@@Plugin::getIcon(qReal::SdfIconEngineV2Interface *engine) const
{
	return QIcon(engine);
}

QString @@MetamodelName@@Plugin::editorName() const
{
	 return "@@MetamodelName@@ Editor";
}

QString @@MetamodelName@@Plugin::diagramName(QString const &diagram) const
{
	return diagramNameMap[diagram];
}

QString @@MetamodelName@@Plugin::diagramNodeName(QString const &diagram) const
{
	return diagramNodeNameMap[diagram];
}

QString @@MetamodelName@@Plugin::elementName(QString const &diagram, QString const &element) const
{
	return elementsNameMap[diagram][element];
}

QString @@MetamodelName@@Plugin::elementMouseGesture(QString const &diagram, QString const &element) const
{
	return elementMouseGesturesMap[diagram][element];
}

qReal::ElementImpl* @@MetamodelName@@Plugin::getGraphicalObject(QString const &/*diagram*/, QString const &element) const
{
@@GetGraphicalObjectLine@@

	Q_ASSERT(!"Request for creation of an element with unknown name");
	return NULL;
}

QStringList @@MetamodelName@@Plugin::getPropertyNames(QString const &/*diagram*/, QString const &element) const
{
	return propertyTypes[element].keys();
}

QStringList @@MetamodelName@@Plugin::getPortTypes(QString const &diagram, QString const &element) const
{
	QStringList result;
	return result;
}

QStringList @@MetamodelName@@Plugin::getReferenceProperties(QString const &/*diagram*/, QString const &element) const
{
	QStringList result;
@@GetReferencePropertiesLine@@
	return result;
}

QStringList @@MetamodelName@@Plugin::getTypesContainedBy(QString const &element) const
{
	QStringList result;
@@GetContainedByLine@@
	return result;
}


QList<QPair<QPair<QString,QString>,QPair<bool,QString> > > @@MetamodelName@@Plugin::getPossibleEdges(QString const &element) const
{
	QList<QPair<QPair<QString,QString>,QPair<bool,QString> > > result;
@@GetPossibleEdgesLine@@
	return result;
}

QList<qReal::EditorInterface::ExplosionData> @@MetamodelName@@Plugin::explosions(QString const &diagram, QString const &element) const
{
	QList<qReal::EditorInterface::ExplosionData> result;
	return result;
}

//(-1) means "edge", (+1) means "node"
int @@MetamodelName@@Plugin::isNodeOrEdge(QString const &element) const
{
@@IsNodeOrEdgeLine@@
	return 0;
}

QStringList @@MetamodelName@@Plugin::getEnumValues(QString name) const
{
	QStringList result;
@@GetEnumValuesLine@@
	return result;
}

QString @@MetamodelName@@Plugin::getGroupsXML() const 
{
	return QString::fromUtf8(""); // temporary desicion
}

QString @@MetamodelName@@Plugin::getPropertyType(QString const &element, QString const &property) const
{
	return propertyTypes[element][property];
}

QString @@MetamodelName@@Plugin::getPropertyDefaultValue(QString const &element, QString const &property) const
{
	return propertyDefault[element][property];
}

QList<qReal::ListenerInterface*> @@MetamodelName@@Plugin::listeners() const
{
	QList<qReal::ListenerInterface*> result;
	return result;
}
