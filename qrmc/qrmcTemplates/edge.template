	class @@ElementName@@ : public qReal::ElementType {
	public:
		void init(QRectF &, PortFactoryInterface const &, QList<PortInterface *> &,
				qReal::LabelFactoryInterface &, QList<qReal::LabelInterface *> &,
				qReal::SdfRendererInterface *, qReal::ElementRepoInterface *) {}

		void init(qReal::LabelFactoryInterface &factory, QList<qReal::LabelInterface*> &titles)
		{
@@EdgeInit@@
		}

		virtual ~@@ElementName@@() {}

		void paint(QPainter *, QRectF &){}
		bool isNode() const { return false; }
		bool isContainer() const { return false; }
		bool isSortingContainer() const { return false; }
		QVector<int> sizeOfForestalling() const { return QVector<int>(4, 0); }
		int sizeOfChildrenForestalling() const { return 0; }
		bool hasMovableChildren() const { return false; }
		bool minimizesToChildren() const { return false; }
		bool maximizesChildren() const { return false; }
		bool isResizeable() const { return true; }
		bool isDividable() const { return false; }
		qReal::ElementType *clone() { return nullptr; }
		bool createChildrenFromMenu() const { return false; }

		QList<double> border() const
		{
			QList<double> list;
			list << 0 << 0 << 0 << 0;
			return list;
		}

		int getPenWidth() const { return 1; }

//It needs to be fixed properly, but for now we use hardcode to be able to compile it
		QColor getPenColor() const { return QColor(0,0,0); }

		QStringList fromPortTypes() const
		{
			QStringList result;
			result << "@@PortsForFromPortTypes@@";
			return result;
		}

//It needs to be fixed properly, but for now we use hardcode to be able to compile it
		QStringList toPortTypes() const
		{
			QStringList result;
			result << "NonTyped";
			return result;
		}

//It needs to be fixed properly, but for now "square" is a hardcode that helps compile it. 
		enums::linkShape::LinkShape shapeType() const
		{
			return enums::linkShape::square;
		}

		Qt::PenStyle getPenStyle() const { return @@LineType@@; }

//It needs to be fixed properly, but for now we use hardcode to be able to compile it
		QStringList bonusContextMenuFields() const
		{
			return QStringList();
		}

	protected:
		virtual void drawStartArrow(QPainter * painter) const
		{
			QBrush old = painter->brush();
			QBrush brush;
			brush.setStyle(Qt::SolidPattern);
@@BeginArrowBrushColor@@
			painter->setBrush(brush);
@@BeginArrowCustomization@@
			painter->setBrush(old);
		}

		virtual void drawEndArrow(QPainter * painter) const
		{
			QBrush old = painter->brush();
			QBrush brush;
			brush.setStyle(Qt::SolidPattern);
@@EndArrowBrushColor@@
			painter->setBrush(brush);
@@EndArrowCustomization@@
			painter->setBrush(old);
		}

		void updateData(qReal::ElementRepoInterface *repo) const
		{
@@UpdateData@@
		}
	};
