class @@ElementName@@ : public qReal::NodeElementType
{
public:
@@NodeConstructor@@
	void init(qReal::LabelFactoryInterface &, QList<qReal::LabelInterface*> &) {}

			void init(QRectF &contents, PortFactoryInterface const &portFactory, QList<PortInterface *> &ports,
							 qReal::LabelFactoryInterface &factory, QList<qReal::LabelInterface*> &titles,
						 qReal::SdfRendererInterface *renderer, qReal::ElementRepoInterface *elementRepo)

	{
//It needs to be fixed. Probably in correct interpretation should be used: @@NodeUnusedArgs@@.
//But for now we use hardcode to be able to compile it
		Q_UNUSED(portFactory);
		Q_UNUSED(ports);

		mRenderer = renderer;
@@NodeLoadShapeRenderer@@
@@NodeLoadPortsRenderer@@ //There is something wrong. But I don't know what and why. I thought that hardcode is here: (shape.cpp(162). But now I'm not sure.
@@NodeSetContents@@
@@NodeInitPorts@@
@@NodeInit@@

//It needs to be fixed properly, but for now we use hardcode to be able to compile it.
	ports << portFactory.createPort(QPointF(0.994424, 0.54334), false, false, 538, 473, new NonTyped());
			mRenderer->setElementRepo(elementRepo);

	}

	~@@ElementName@@() {}

	void paint(QPainter *painter, QRectF &contents)
	{
		mRenderer->render(painter, contents);
	}

	Qt::PenStyle getPenStyle() const { return Qt::SolidLine; }

	int getPenWidth() const { return 0; }
	QColor getPenColor() const { return QColor(); }

	void drawStartArrow(QPainter *) const {}
	void drawEndArrow(QPainter *) const {}

	void updateData(qReal::ElementRepoInterface *repo) const
	{
@@UpdateData@@
	}

	bool isNode() const
	{
		return @@IsNode@@;
	}

	bool isContainer() const
	{
		return @@IsContainer@@;
	}

	bool isSortingContainer() const
	{
		return @@IsSortContainer@@;
	}

	QVector<int> sizeOfForestalling() const
	{
		return @@SizeOfForestalling@@;
	}

	int sizeOfChildrenForestalling() const
	{
		return @@SizeOfChildrenForestalling@@;
	}

	bool minimizesToChildren() const
	{
		return @@MinimizesToChildren@@;
	}

	bool hasMovableChildren() const
	{
		return @@HasMovableChildren@@;
	}

	bool maximizesChildren() const
	{
		return @@MaximizesChildren@@;
	}

//It needs to be fixed properly, but for now we use hardcode to be able to compile it.
	bool createChildrenFromMenu() const
	{
		return true;
	}

	QList<double> border() const
	{
		QList<double> list;
@@NodeBorder@@
		return list;
	}

	QStringList bonusContextMenuFields() const
	{
		return @@ItemsList@@;
	}

	bool isResizeable() const
	{
		return @@IsResizeable@@;
	}


	QStringList fromPortTypes() const
	{
		return QStringList("NonTyped");
	}

	QStringList toPortTypes() const
	{
		return QStringList("NonTyped");
	}

	enums::linkShape::LinkShape shapeType() const
	{
		return enums::linkShape::square;
	}

	bool isDividable() const
	{
		return false;
	}

private:
	qReal::SdfRendererInterface *mRenderer;
@@LabelDefinition@@
};

