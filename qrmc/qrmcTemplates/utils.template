@@InitDiagramNameMapLine@@=	diagramNameMap["@@DiagramName@@"] = QString::fromUtf8("@@DiagramDisplayedName@@");
@@InitDiagramNodeNameMapLine@@=	diagramNodeNameMap["@@DiagramName@@"] = "@@DiagramNodeName@@";
@@InitElementNameMapLine@@=	elementsNameMap["@@DiagramName@@"]["@@ElementName@@"] = QString::fromUtf8("@@ElementDisplayedName@@");
@@InitMouseGesturesMapLine@@=	elementMouseGesturesMap["@@DiagramName@@"]["@@ElementName@@"] = "@@GesturePath@@";
@@InitPropertyNamesMapLine@@=	propertiesDisplayedNamesMap["@@DiagramName@@"]["@@ElementName@@"]["@@PropertyName@@"] = QString::fromUtf8("@@PropertyDisplayedName@@");
@@InitPropertyTypesMapLine@@=	propertyTypes["@@ElementName@@"]["@@PropertyName@@"] = "@@PropertyType@@";
@@InitPropertyDefaultMapLine@@=	propertyDefault["@@ElementName@@"]["@@PropertyName@@"] = "@@PropertyDefaultValue@@";
@@InitParentsMapLine@@=	parentsMap["@@DiagramName@@"]["@@ChildElementName@@"] << qMakePair(QString("@@DiagramName@@"), QString("@@ParentElementName@@"));
@@GetGraphicalObjectLine@@=	if (element == "@@ElementName@@")\n		return new @@ElementName@@();
@@GetPropertyNamesLine@@=	if (element == "@@ElementName@@")\n		result  << @@PropertiesList@@;
@@GetContainedByLine@@=	if (element == "@@ElementName@@")\n		result @@ContainedByList@@;
@@GetConnectedTypesLine@@=	if (element == "@@ElementName@@")\n		result @@ConnectedToList@@;
@@GetUsedTypesLine@@=	if (element == "@@ElementName@@")\n		result @@UsedTypesList@@ ;
@@GetPortTypesLine@@=	if (element == "@@ElementName@@") {\n 		result << @@PortTypesList@@;\n	}
@@GetReferencePropertiesLine@@=	if (element == "@@ElementName@@")\n 		result @@ReferencePropertiesList@@;
@@IsNodeOrEdgeLine@@=	if (element == "@@ElementName@@")\n		return @@IsNodeOrEdgeValue@@;

@@GetPossibleEdgesLine@@=	if (element == "@@ElementName@@")\n		result @@PossibleEdgesList@@;
@@EdgeInit@@=			title_@@Count@@ = factory.createLabel(@@Count@@, @@LabelX@@, @@LabelY@@, @@LabelName@@, @@LabelReadonly@@, @@Rotation@@);\n			title_@@Count@@->setBackground(Qt::white);\n			title_@@Count@@->setScaling(@@XCoordIsScalable@@, @@YCoordIsScalable@@);\n			title_@@Count@@->setFlags(0);\n			title_@@Count@@->setTextInteractionFlags(Qt::NoTextInteraction);\n			titles.append(title_@@Count@@);
@@UpdateData@@=			title_@@Count@@->setHtml(QString("<b>%1</b>").arg(@@UpdateRole@@));
@@NameRole@@=repo->name()
@@CustomRole@@=repo->logicalProperty("@@LabelName@@")
@@LabelDefinition@@=		qReal::LabelInterface *title_@@Count@@;
@@NodeLoadShapeRenderer@@=			mRenderer->load(QString(":/generated/shapes/@@ElementName@@Class.sdf"));
@@NodeSetContents@@=			contents.setWidth(@@NodeWidth@@);\n			contents.setHeight(@@NodeHeight@@);\n		/*	StatPoint pt;   */
@@NodeInitLinePort@@=		{\n			StatLine ln;\n			ln.line = QLineF(@@StartX@@, @@StartY@@, @@EndX@@, @@EndY@@);\n			ln.prop_x1 = @@NodeLinePortStartXScalable@@;\n			ln.prop_y1 = @@NodeLinePortStartYScalable@@;\n			ln.prop_x2 = @@NodeLinePortEndXScalable@@;\n			ln.prop_y2 = @@NodeLinePortEndYScalable@@;\n			linePorts << ln;\n		};
@@NodeInit@@=			title_@@Count@@ = factory.createLabel(@@Count@@, @@LabelX@@, @@LabelY@@, @@LabelName@@, @@Rotation@@);\n			title_@@Count@@->setBackground(Qt::transparent);\n			title_@@Count@@->setScaling(@@XCoordIsScalable@@, @@YCoordIsScalable@@);\n			title_@@Count@@->setFlags(0);\n			title_@@Count@@->setTextInteractionFlags(Qt::NoTextInteraction);\n			titles.append(title_@@Count@@);
@@NodeValidBorder@@=			list << 30 << 15 << 15 << 25;
@@NodeInvalidBorder@@=			list << 0 << 0 << 0 << 0;
@@PortsSdf@@=<picture sizex="@@NodeWidth@@" sizey="@@NodeHeight@@" >\n@@Ports@@\n</picture>
@@LinePort@@=	<line x1="@@StartX@@" y1="@@StartY@@" x2="@@EndX@@" y2="@@EndY@@" stroke-width="7" stroke-style="solid" stroke="#c3dcc4" />\n	<line x1="@@StartX@@" y1="@@StartY@@" x2="@@EndX@@" y2="@@EndY@@" stroke-width="1" stroke-style="solid" stroke="#465945" />
@@PointPort@@=	<point stroke-width="11" stroke-style="solid" stroke="#c3dcc4" x1="@@PointX@@" y1="@@PointY@@" />\n	<point stroke-width="3" stroke-style="solid" stroke="#465945" x1="@@PointX@@" y1="@@PointY@@" />
@@NodeConstructor@@=	explicit @@ElementName@@(qReal::Metamodel &metamodel)\n		: NodeElementType(metamodel)\n	{\n		initProperties();\n	}
@@ItemsValidList@@=mBonusContextMenuFields
@@ItemsInvalidList@@=QStringList()
@@SdfFile@@=	<file>generated/shapes/@@Filename@@</file>
@@LineSdf@@=<picture sizex="100" sizey="60" >\n	<line fill="#000000" stroke-style="@@LineType@@" stroke="#000000" y1="0" x1="0" y2="60" stroke-width="2" x2="100" fill-style="solid" />\n</picture>
@@Arrow@@=			static const QPointF points[] = {\n				QPointF(0,0),\n				QPointF(-5,10),\n				QPointF(5,10)\n			};\n			painter->drawPolygon(points, 3);
@@Rhomb@@=			static const QPointF points[] = {\n				QPointF(0,0),\n				QPointF(-5,10),\n				QPointF(0,20),\n				QPointF(5,10)\n			};\n			painter->drawPolygon(points, 4);
@@OpenArrow@@=			static const QPointF points[] = {\n				QPointF(-5,10),\n				QPointF(0,0),\n				QPointF(5,10)\n			};\n			painter->drawPolygon(points, 3);
@@ComplexArrow@@=			static const QPointF points[] = {\n				QPointF(-15,30),\n				QPointF(-10,10),\n				QPointF(0,0),\n				QPointF(10,10),\n				QPointF(15,30),\n				QPointF(0,23),\n				QPointF(-15,30)\n			};\n			painter->drawPolyline(points, 7);
@@FilledArrowColor@@=			brush.setColor(Qt::black);
@@EmptyArrowColor@@=			brush.setColor(Qt::white);
@@ElementDescriptionMapLine@@=	elementsDescriptionMap["@@DiagramName@@"]["@@ElementName@@"] = tr("@@Description@@");
@@GetEnumValuesLine@@=	if (name == "@@ElementName@@")\n		return { @@qMakeLine@@ };
