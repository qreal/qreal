#include "loopNode.h"
#include <qrutils/stringUtils.h>

using namespace qReal::robots::generators::semantics;

LoopNode::LoopNode(Id const &idBinded, QObject *parent)
	: ConditionalNode(idBinded, parent)
	, mBodyZone(new ZoneNode(this))
	, mDoWhileForm(false)
{
	mBodyZone->setParentNode(this);
}

QString LoopNode::toString(GeneratorCustomizer &customizer, int indent) const
{
	simple::AbstractSimpleGenerator *generator = NULL;
	if (mId.isNull()) {
		// Then this loop is generated by arrow back from simple block
		generator = customizer.factory()->infiniteLoopGenerator(mId, customizer);
	} else {
		if (customizer.semanticsOf(mId) == enums::semantics::loopBlock) {
			generator = customizer.factory()->forLoopGenerator(mId, customizer);
			// Then this loop is generated by a regular loop block usage
		} else {
			// Then this loop is generated by arrow back from if block
			generator = customizer.factory()->whileLoopGenerator(mId, customizer
					, mDoWhileForm, mAddNotToCondition);
		}
	}

	QString result = utils::StringUtils::addIndent(generator->generate(), indent);
	QString const bodyCode = mBodyZone->toString(customizer, indent + 1);
	result.replace("@@BODY@@", bodyCode);
	return result;
}

void LoopNode::appendChildren(QLinkedList<SemanticNode *> const &nodes)
{
	mBodyZone->appendChildren(nodes);
}

void LoopNode::setForm(bool doWhileForm)
{
	mDoWhileForm = doWhileForm;
}

ZoneNode *LoopNode::bodyZone()
{
	return mBodyZone;
}

QLinkedList<SemanticNode *> LoopNode::children() const
{
	return QLinkedList<SemanticNode *>() << mBodyZone;
}
