/* Copyright 2007-2015 QReal Research Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

#include "generatorBase/semanticTree/loopNode.h"

#include <qrutils/stringUtils.h>

using namespace generatorBase::semantics;
using namespace qReal;

LoopNode::LoopNode(const Id &idBinded, QObject *parent)
	: ConditionalNode(idBinded, parent)
	, mBodyZone(new ZoneNode(this))
	, mDoWhileForm(false)
{
	mBodyZone->setParentNode(this);
}

QString LoopNode::toStringImpl(GeneratorCustomizer &customizer, int indent, const QString &indentString) const
{
	simple::AbstractSimpleGenerator *generator = nullptr;
	if (mId.isNull()) {
		// Then this loop is generated by arrow back from simple block
		generator = customizer.factory()->infiniteLoopGenerator(mId, customizer);
	} else {
		if (customizer.semanticsOf(mId) == enums::semantics::loopBlock) {
			generator = customizer.factory()->forLoopGenerator(mId, customizer);
			// Then this loop is generated by a regular loop block usage
		} else {
			// Then this loop is generated by arrow back from if block
			generator = customizer.factory()->whileLoopGenerator(mId, customizer
					, mDoWhileForm, mAddNotToCondition);
		}
	}

	QString result = utils::StringUtils::addIndent(generator->generate(), indent, indentString);
	const QString bodyCode = mBodyZone->toString(customizer, indent + 1, indentString);
	result.replace("@@BODY@@", bodyCode);
	return result;
}

void LoopNode::appendChildren(QLinkedList<SemanticNode *> const &nodes)
{
	mBodyZone->appendChildren(nodes);
}

void LoopNode::setForm(bool doWhileForm)
{
	mDoWhileForm = doWhileForm;
}

ZoneNode *LoopNode::bodyZone()
{
	return mBodyZone;
}

QString LoopNode::scheme() const
{
	return "loop[" + mBodyZone->scheme() + "]";
}

QLinkedList<SemanticNode *> LoopNode::children() const
{
	return QLinkedList<SemanticNode *>() << mBodyZone;
}
